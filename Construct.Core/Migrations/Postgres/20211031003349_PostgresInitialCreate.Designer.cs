// <auto-generated />
using System;
using Construct.Core.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Construct.Core.Migrations.Postgres
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20211031003349_PostgresInitialCreate")]
    partial class PostgresInitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Construct.Core.Database.Model.Permission", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserHashedId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("UserHashedId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.PrintLog", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BillTo")
                        .HasColumnType("text");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaterialName")
                        .HasColumnType("text");

                    b.Property<bool>("Owed")
                        .HasColumnType("boolean");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserHashedId")
                        .HasColumnType("text");

                    b.Property<float>("WeightGrams")
                        .HasColumnType("real");

                    b.HasKey("Key");

                    b.HasIndex("MaterialName");

                    b.HasIndex("UserHashedId");

                    b.ToTable("PrintLog");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.PrintMaterial", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("CostPerGram")
                        .HasColumnType("real");

                    b.HasKey("Name");

                    b.ToTable("PrintMaterials");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.Student", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("College")
                        .HasColumnType("text");

                    b.Property<string>("UserHashedId")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("UserHashedId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.User", b =>
                {
                    b.Property<string>("HashedId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignUpTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("HashedId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.VisitLog", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserHashedId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("UserHashedId");

                    b.ToTable("VisitLogs");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.Permission", b =>
                {
                    b.HasOne("Construct.Core.Database.Model.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserHashedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.PrintLog", b =>
                {
                    b.HasOne("Construct.Core.Database.Model.PrintMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialName");

                    b.HasOne("Construct.Core.Database.Model.User", "User")
                        .WithMany("PrintLogs")
                        .HasForeignKey("UserHashedId");

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.Student", b =>
                {
                    b.HasOne("Construct.Core.Database.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserHashedId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.VisitLog", b =>
                {
                    b.HasOne("Construct.Core.Database.Model.User", "User")
                        .WithMany("VisitLogs")
                        .HasForeignKey("UserHashedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Construct.Core.Database.Model.User", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("PrintLogs");

                    b.Navigation("VisitLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
